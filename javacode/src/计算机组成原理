#第二章：
    浮点数的一般表示形式:
        一个机器浮点数由阶码和尾数及其符号位
        组成(尾数:用定点小数表示，给出有效数字
        的位数决定了浮点数的表示精度;阶码:用整
        数形式表示，指明小数点在数据中的位置，决
        定了浮点数的表示范围。) :


在IEEE754标准格式表示的32位浮点数中，
    S:浮点数的符号位，1位,
    0表示正数，1表示负数。
    M:尾数，23位， 纯小数,
    采用原码来表示。
    E:
    阶码，8位，
    采用移码方式来表示正负指数。
    将浮点数的指数真值e变成阶码E时，应将
    指数e加_上一个固定的偏移值127(01111111)
    即E =e+ 127.

 IEEE754标准中，一个规格化的32位浮点
    数x的真值可表示为
    x =(- 1)^sx(1.M)*x2^(E-127)
    e= E-127
    在32位浮点数表示中，要除去E用全0和全
    1(255)1o表示零和无穷大的特殊情况，指数的偏
    移值不选128(10000000)， 而选127(01111111)。
    对于规格化浮点数，E的范围变为1到254,
    真正的指数值e则为- 126到+127.
2.1.6校验码

    为了防止计算机在处理信息过程中出现错误,
    可将信号采用专门的逻辑线路进行编码以检测错
    误。通常的方法是在每个字上添加一些校验位，
    用来确定字中出现错误的位置。
    最简单且应用广泛的检错码是采用一位校验
    位的奇校验或偶校验。
    设x =( x0X1... xn-1)是一个n位字，
    则奇校验位C定义为
    C= X0φx1θ...φXn-1
    同理偶校验位C定义为
    C= X0田X1田...田Xη-1


































#include<stdio.h>
typedef struct Studen{
        char name[10];
        int number;
        int grade;
} stu;
int main(void){
   stu stu[10];
   for(int i=0;i<10;i++){
        char name[10];
        scanf("%s",name)
   }
}
